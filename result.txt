result:（CPU - 2核 内存 - 2GB）
(请求包100字节)
非io复用
     并发量:                          100       200        1000            
单进程(singleprocess)                424ms     795ms        -          
多进程(multiprocess)                 891ms    1498ms      7683ms       
多线程(multithread)                  461ms     875ms      4820ms       
进程池1(processpool1)                394ms     686ms      1099203ms    
进程池2(processpool2)                464ms     687ms      335470ms     
线程池(threadpool)                   357ms     658ms      458326ms     
领导者跟随者模式(leaderandfollower)   356ms     617ms      825855ms

io复用
     并发量:                            100       200        1000        
select                                 347ms     785ms     581370ms             
poll                                   340ms     851ms     319311ms      
epoll                                  374ms     844ms     38038ms          
epollreactorsingleprocess              1455ms    2992ms     11763ms
epollreactorsingleprocess_et           1783ms    3559ms     12193ms
epollreactorsingleprocess_corouline    165ms     350ms      1711ms     7953127ms(√)
epollreactorthreadpoll                 1448ms    2839ms     11038ms    
epollreactorthreadpoolhsha             1131ms    2211ms     10291ms 
epollreactorthreadpollms               1597ms    3203ms     11282ms
epollreactorprocesspollcoroutine       1172ms    2240ms     10597ms

因为我使用的服务器比较一般，内存不足够，在大于1000的并发量时，会出现读写缓冲池填满等问题导致无法发送或接受完整数据。
只有在协程池的时候可以限制使用栈的大小，可以缓解。
在高并发压力下，传统多线程/多进程模型由于每个线程/进程的栈空间及上下文开销过高，导致系统资源耗尽，
无法稳定支持 1000+ 并发连接。而我协程模型采用小栈结构（8KB）。
并集成了协程栈空间动态释放机制（基于 P99 统计），能显著缓解内存压力，提升系统稳定性与处理能力。
记录一段时间内协程活跃数量的分布，通过计算 99% 的时间点下活跃协程数量（即 P99 值），来判断系统需要保留多少协程栈，
其余空闲协程的栈则可以安全释放，释放上限为每次 25 个，避免引发抖动或耗时过长的问题。
在 2 核 2GB 的低资源环境中，协程模型是唯一能稳定支撑高并发的方案。

et和lt，大包lt单次读取性能差，要调用更多epoll_wait函数。多次读取时，lt和et相同。
在大型服务器中，协程池模式与非协程池模式相比，并无优于，主要是协程池模式多了协程调度和管理。

比较hsha下是工作流程写应答优于io线程写应答，因为ui线程需要付出更多锁的成本（epoll_ctl线程安全，内部有锁）。而且在写应答时，socket通常可写，
因此不监听写事件，直接写应答更为方便。

大型服务器中，协程池不优于进程池和线程池。

特点	    传统线程/进程       	协程
切换开销	高，内核态切换	       低，用户态切换
资源占用	大（栈空间、内核资源）	小（轻量级栈）
并发数量	较少	              可数万个
IO等待处理	阻塞导致线程挂起       挂起协程切换
CPU利用率	低（线程阻塞浪费）	   高（无阻塞调度）